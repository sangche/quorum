/*
class Entry2(s: Server, ar: ActorRef) {
  implicit val _ = s.context.system.dispatcher

  var m = collection.mutable.Map[Any, Int]().withDefaultValue(0)

  var timer: Cancellable = null

  def resetTimeOut(du: FiniteDuration, to: TimeOut) = {
    if (timer != null) timer.cancel()
    timer = s.context.system.scheduler.scheduleOnce(du, s.self, to)
  }

  private def resetm: Boolean = {
    m = collection.mutable.Map[Any, Int]().withDefaultValue(0)
    true
  }

  def isQuorum = s.isMajority(m.values.max) && timer.cancel() && resetm // short circuit

  def isDone = (m.values.sum >= s.members.size) && timer.cancel() && resetm // short circuit

  def inc(v: Any) = m(v) += 1

  def getClient = ar

  def getConsensus = m.find(_._2 == m.values.max).get
}
*/